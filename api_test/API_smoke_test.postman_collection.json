{
	"info": {
		"_postman_id": "ea7e6bd0-e1ff-44a8-9496-a41f0a486eb1",
		"name": "API_smoke_test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "clients smoke test",
			"item": [
				{
					"name": "login to tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5875c19d-624c-4941-b2aa-f9dc2c263109",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"userId\", jsonData.userid);",
									"let sessionHeader = pm.response.headers.get(\"x-tidepool-session-token\");",
									"pm.environment.set(\"sessionToken\", sessionHeader);",
									"",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1000, true, jsonData,\"userSchema\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{loginEmail}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{loginPw}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api}}/auth/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the logged in users profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3848609-36dc-4ef7-86d6-9a21656afffa",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, pm.response.json(),\"userProfileSchema\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/metadata/{{userId}}/profile",
							"host": [
								"{{api}}"
							],
							"path": [
								"metadata",
								"{{userId}}",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "invite another user see data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99a4bf66-ae97-4a85-8484-6f5cd07752dd",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 1900, false, pm.response.json(),\"careteamInviteSchema\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "046412cf-93d9-4a0f-bfb8-92d537d10a26",
								"exec": [
									"const emailName = pm.environment.get(\"sharingEmailName\");",
									"let emailAddress = emailName+ \"+sharing_\" + Date.now() + \"@tidepool.org\"",
									"pm.variables.set(\"sharingEmailAddress\", emailAddress);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{sharingEmailAddress}}\",\n  \"permissions\": {\n    \"view\": {}\n  }\n}"
						},
						"url": {
							"raw": "{{api}}/confirm/send/invite/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm",
								"send",
								"invite",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create a note for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3341c83a-bc9a-4043-8c8b-8020bf5c8639",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(201, 500, false, pm.response.json(),\"messageAddedSchema\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"guid\": \"{{$guid}}\",\n        \"userid\": \"{{userId}}\",\n        \"timestamp\": \"2019-07-15T16:43:39+12:00\",\n        \"messagetext\": \"working??\"\n    }\n}"
						},
						"url": {
							"raw": "{{api}}/message/send/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"send",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all current notes for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72de232c-c03c-48c1-bc41-017b8aeece31",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, pm.response.json().messages,\"messagesSchema\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{api}}/message/all/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"message",
								"all",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload a piece of device data for the user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8b9cf43a-8c79-47b0-9e17-02f9fb0214ba",
								"exec": [
									"const uuid = require('uuid');",
									"pm.environment.set(\"uploadDeviceDataItemId\", uuid.v4());",
									"const moment = require('moment');",
									"let now = moment();",
									"pm.variables.set(\"uploadDeviceDataItemTime\", now.format());",
									"pm.variables.set(\"uploadDeviceDataItemDeviceTime\", now.format('YYYY-MM-DDThh:mm:ss'));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0b1561e-efe4-496b-89f7-986d2badf171",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"time\": \"{{uploadDeviceDataItemTime}}\",\n    \"clockDriftOffset\": -579000,\n    \"conversionOffset\": 0,\n    \"deviceTime\": \"{{uploadDeviceDataItemDeviceTime}}\",\n    \"deviceId\": \"Device-123\",\n    \"type\": \"smbg\",\n    \"value\": 106,\n    \"units\": \"mg/dL\",\n    \"subType\": \"linked\",\n    \"payload\": {\n      \"logIndices\": [\n        1\n      ]\n    },\n    \"uploadId\": \"upid_d5f278d59e4a\",\n    \"guid\": \"{{uploadDeviceDataItemId}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{api}}/data/{{userId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get the last piece of uploaded device data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e19b771-d4bf-4f62-815b-066a9cf2a7ff",
								"exec": [
									"let jsonData = pm.response.json();",
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 500, false, jsonData,\"smbgsSchema\");",
									"pm.test(\"one item is returned\", function () {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});",
									"pm.test(\"the returned item is the same that we uploaded\", function () {",
									"    pm.expect(jsonData[0].guid).to.eql(pm.environment.get(\"uploadDeviceDataItemId\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3433a954-3a9e-49f4-a76b-3dd76c7b493a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{userId}}?type=smbg&latest=true",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{userId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "smbg"
								},
								{
									"key": "startDate",
									"value": "{{dDataStartDate}}",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "{{dDataEndDate}}",
									"disabled": true
								},
								{
									"key": "latest",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logout of tidepool",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05a9c738-74ab-403a-9f63-7e963c699683",
								"exec": [
									"const assert = eval(globals.loadAsserts);",
									"assert.common(200, 300, false, null, \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tidepool-session-token",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api}}/auth/logout",
							"host": [
								"{{api}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Non-specific usage of the tidepool API with the goal of giving it a quick smoke test so see that its is working as many clients would execpt it too. We are looking at\n\n - response code\n - response timing \n - headers, specificcally the x-tidepool-session and content type\n - response json data to make sure it matches our schema expectations at a high level",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "49c33b7f-2689-4615-97e2-9cae0611c109",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3c4b721d-fa7b-47fd-9afa-a3e644e52681",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "85b478fc-ac96-4614-bacc-c1e101204a8b",
				"type": "text/javascript",
				"exec": [
					"const userSchema = { \"required\": [\"userid\", \"username\", \"emails\", \"emailVerified\", \"termsAccepted\"], \"properties\": { \"emailVerified\": { \"type\": \"boolean\" }, \"emails\": { \"type\": \"array\" }, \"userid\": { \"type\": \"string\" }, \"username\": { \"type\": \"string\" }, \"termsAccepted\": { \"type\": \"string\" } } };",
					"const messageAddedSchema = { \"required\": [\"id\"], \"properties\": { \"id\": { \"type\": \"string\" } } };",
					"const messagesSchema = { \"type\": \"array\", \"items\": { \"required\": [\"id\", \"guid\", \"parentmessage\", \"userid\", \"groupid\", \"timestamp\", \"createdtime\", \"messagetext\", \"user\"], \"properties\": { \"id\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"userid\": { \"type\": \"string\" }, \"groupid\": { \"type\": \"string\" }, \"timestamp\": { \"type\": \"string\" }, \"createdtime\": { \"type\": \"string\" }, \"messagetext\": { \"type\": \"string\" }, \"user\": { \"type\": \"object\" } } } };",
					"const smbgsSchema = { \"type\": \"array\", \"items\": { \"required\": [\"_active\", \"_groupId\", \"_id\", \"_schemaVersion\", \"_userId\", \"_version\", \"clockDriftOffset\", \"createdTime\", \"deviceId\", \"deviceTime\", \"guid\", \"id\", \"subType\", \"time\", \"type\", \"units\", \"uploadId\", \"value\"], \"properties\": { \"_active\": { \"type\": \"boolean\" }, \"_groupId\": { \"type\": \"string\" }, \"_id\": { \"type\": \"string\" }, \"_schemaVersion\": { \"type\": \"integer\" }, \"_userId\": { \"type\": \"string\" }, \"_version\": { \"type\": \"integer\" }, \"clockDriftOffset\": { \"type\": \"integer\" }, \"conversionOffset\": { \"type\": \"integer\" }, \"createdTime\": { \"type\": \"string\" }, \"deviceId\": { \"type\": \"string\" }, \"deviceTime\": { \"type\": \"string\" }, \"guid\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" }, \"subType\": { \"type\": \"string\" }, \"time\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"units\": { \"type\": \"string\" }, \"uploadId\": { \"type\": \"string\" }, \"value\": { \"type\": \"number\" } } } };",
					"const userProfileSchema = {\"required\": [\"fullName\"], \"properties\": { \"fullName\": { \"type\": \"string\" },",
					"\"patient\": { \"type\": \"object\" }}};",
					"const careteamInviteSchema = { \"required\": [\"key\", \"type\", \"email\", \"creatorId\", \"creator\", \"context\", \"created\"], \"properties\": { \"key\": { \"type\": \"string\" }, \"type\": { \"type\": \"string\" }, \"email\": { \"type\": \"string\" }, \"creatorId\": { \"type\": \"string\" }, \"creator\": { \"type\": \"object\" }, \"context\": { \"type\": \"object\" }, \"created\": { \"type\": \"string\" } } };",
					"",
					"pm.globals.set(\"userSchema\", JSON.stringify(userSchema));",
					"pm.globals.set(\"userProfileSchema\", JSON.stringify(userProfileSchema));",
					"pm.globals.set(\"messageAddedSchema\", JSON.stringify(messageAddedSchema));",
					"pm.globals.set(\"messagesSchema\", JSON.stringify(messagesSchema));",
					"pm.globals.set(\"smbgsSchema\", JSON.stringify(smbgsSchema));",
					"pm.globals.set(\"careteamInviteSchema\", JSON.stringify(careteamInviteSchema));",
					"",
					"pm.globals.set('loadAsserts', function loadAsserts() {",
					"    let asserts = {};",
					"    asserts.responseTimeMsLessThan = function responseTimeMsLessThan(ms) {",
					"        pm.test(\"Response time is less than \"+ms+\"ms\", function () {",
					"            pm.expect(pm.response.responseTime).to.be.below(ms);",
					"        });",
					"    };",
					"    asserts.responseTypeJson = function responseTypeJson() {",
					"        pm.test(\"Response type is application/json\", function () {",
					"            pm.expect(pm.response.headers.get(\"content-type\")).to.equal('application/json');",
					"        });",
					"    };",
					"    asserts.responseHasSessionToken = function responseHasSessionToken() {",
					"        pm.test(\"Response has x-tidepool-session-token\", function () {",
					"            pm.response.to.have.header(\"x-tidepool-session-token\");",
					"        });",
					"    };",
					"    asserts.responseHasNoSessionToken = function responseHasNoSessionToken(){",
					"         pm.test(\"Response has NO x-tidepool-session-token\", function () {",
					"            pm.response.to.not.have.header(\"x-tidepool-session-token\");",
					"        });",
					"    };",
					"    asserts.responseBodyMatchesSchema = function responseBodyMatchesSchema(jsonData,schemaName) {",
					"         pm.test(\"Response body matches \"+schemaName, function () {",
					"            let schema = JSON.parse(pm.globals.get(schemaName));",
					"            pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
					"         });",
					"    };",
					"    asserts.responseStatusCodeIs = function responseStatusCodeIs(code){",
					"        pm.test(\"Response status is \"+code, function () {",
					"            pm.response.to.have.status(code);",
					"        });",
					"    };",
					"    asserts.common = function common(expectedCode, durationMs, hasSessionToken, jsonData, schemaName){",
					"            asserts.responseStatusCodeIs(expectedCode);",
					"            asserts.responseTimeMsLessThan(durationMs);",
					"            if(hasSessionToken){",
					"                assert.responseHasSessionToken();",
					"            }else{",
					"                assert.responseHasNoSessionToken();",
					"            }",
					"            if (jsonData!==null){",
					"                assert.responseTypeJson();",
					"                assert.responseBodyMatchesSchema(jsonData,schemaName);",
					"            }",
					"    };",
					"    return asserts;",
					"} + '; loadAsserts();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "45b7dd35-b3b4-4115-bbff-92d4e2158b6f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}